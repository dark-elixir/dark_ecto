defmodule DarkEcto.Projections.TypesTest do
  @moduledoc """
  Test for `DarkEcto.Projections.Types`
  """

  use ExUnit.Case, async: true

  alias DarkEcto.Projections.Types

  describe ".permuted_conversion_mappings/0" do
    test "returns the correct keys" do
      assert Types.permuted_conversion_mappings() |> Map.keys() == [
               #  :absinthe_to_cli,
               :absinthe_to_ecto,
               :absinthe_to_typescript,
               :absinthe_to_typespec,
               #  :cli_to_absinthe,
               #  :cli_to_ecto,
               #  :cli_to_typescript,
               #  :cli_to_typespec,
               :ecto_to_absinthe,
               #  :ecto_to_cli,
               :ecto_to_typescript,
               :ecto_to_typespec,
               :typescript_to_absinthe,
               #  :typescript_to_cli,
               :typescript_to_ecto,
               :typescript_to_typespec,
               :typespec_to_absinthe,
               #  :typespec_to_cli,
               :typespec_to_ecto,
               :typespec_to_typescript
             ]
    end

    test "returns the correct mapping for :absinthe_to_ecto" do
      assert Types.permuted_conversion_mappings().absinthe_to_ecto == [
               {:string, :binary},
               {:string, :string},
               {:boolean, :boolean},
               {:float, :float},
               {:integer, :integer},
               {:decimal, :decimal},
               {:time, :time},
               {:time, :time_usec},
               {:date, :date},
               {:naive_datetime, :naive_datetime},
               {:naive_datetime, :naive_datetime_usec},
               {:datetime, :utc_datetime},
               {:datetime, :utc_datetime_usec},
               {:json, :map},
               {:id, :id},
               {:uuid4, :binary_id},
               {:uuid4, Ecto.UUID},
               {:inet, :inet},
               {:string, EctoFields.URL},
               {:inet, EctoNetwork.INET},
               {:inet, Postgrex.INET},
               {:string, SFX.Ecto.Types.DriversLicenseNumberType},
               {:string, SFX.Ecto.Types.EmailType},
               {:string, SFX.Ecto.Types.FederalTaxIdType},
               {:string, SFX.Ecto.Types.ImageBase64Type},
               {:string, SFX.Ecto.Types.SSNType},
               {:string, SFX.Ecto.Types.USPhoneNumberType},
               {:json, SFX.Ecto.Types.JsonLogicType},
               {:__EXCLUDE__, :__ecto_virtual_field__},
               {:__EXCLUDE__, :__ecto_join_table__}
             ]
    end

    test "returns the correct mapping for :absinthe_to_typescript" do
      assert Types.permuted_conversion_mappings().absinthe_to_typescript == [
               {:string, "string"},
               {:string, "string"},
               {:boolean, "boolean"},
               {:float, "number"},
               {:integer, "Int"},
               {:decimal, "Decimal"},
               {:time, "TimeStr"},
               {:time, "TimeStr"},
               {:date, "DateStr"},
               {:naive_datetime, "DateTimeStr"},
               {:naive_datetime, "DateTimeStr"},
               {:datetime, "DateTimeStr"},
               {:datetime, "DateTimeStr"},
               {:json, "Object"},
               {:id, "ID"},
               {:uuid4, "UUID4"},
               {:uuid4, "UUID4"},
               {:inet, "IPv4"},
               {:string, "UrlStr"},
               {:inet, "IPv4"},
               {:inet, "IPv4"},
               {:string, "string"},
               {:string, "string"},
               {:string, "string"},
               {:string, "string"},
               {:string, "string"},
               {:string, "string"},
               {:json, "JsonLogicObject"},
               {:__EXCLUDE__, "any"},
               {:__EXCLUDE__, "Object"}
             ]
    end

    test "returns the correct mapping for :absinthe_to_typespec" do
      assert Types.permuted_conversion_mappings().absinthe_to_typespec == [
               {:string, "String.t()"},
               {:string, "String.t()"},
               {:boolean, "boolean()"},
               {:float, "float()"},
               {:integer, "integer()"},
               {:decimal, "Decimal.t()"},
               {:time, "Time.t()"},
               {:time, "Time.t()"},
               {:date, "Date.t()"},
               {:naive_datetime, "NaiveDateTime.t()"},
               {:naive_datetime, "NaiveDateTime.t()"},
               {:datetime, "DateTime.t()"},
               {:datetime, "DateTime.t()"},
               {:json, "map()"},
               {:id, "SFX.foreign_key()"},
               {:uuid4, "Ecto.UUID.t()"},
               {:uuid4, "Ecto.UUID.t()"},
               {:inet, "Postgrex.INET()"},
               {:string, "String.t()"},
               {:inet, "Postgrex.INET()"},
               {:inet, "Postgrex.INET()"},
               {:string, "String.t()"},
               {:string, "String.t()"},
               {:string, "String.t()"},
               {:string, "String.t()"},
               {:string, "String.t()"},
               {:string, "String.t()"},
               {:json, "SFX.Ecto.Types.JsonLogicType.t()"},
               {:__EXCLUDE__, "virtual :: any()"},
               {:__EXCLUDE__, "join_table :: struct()"}
             ]
    end

    test "returns the correct mapping for :ecto_to_absinthe" do
      assert Types.permuted_conversion_mappings().ecto_to_absinthe == [
               {:binary, :string},
               {:string, :string},
               {:boolean, :boolean},
               {:float, :float},
               {:integer, :integer},
               {:decimal, :decimal},
               {:time, :time},
               {:time_usec, :time},
               {:date, :date},
               {:naive_datetime, :naive_datetime},
               {:naive_datetime_usec, :naive_datetime},
               {:utc_datetime, :datetime},
               {:utc_datetime_usec, :datetime},
               {:map, :json},
               {:id, :id},
               {:binary_id, :uuid4},
               {Ecto.UUID, :uuid4},
               {:inet, :inet},
               {EctoFields.URL, :string},
               {EctoNetwork.INET, :inet},
               {Postgrex.INET, :inet},
               {SFX.Ecto.Types.DriversLicenseNumberType, :string},
               {SFX.Ecto.Types.EmailType, :string},
               {SFX.Ecto.Types.FederalTaxIdType, :string},
               {SFX.Ecto.Types.ImageBase64Type, :string},
               {SFX.Ecto.Types.SSNType, :string},
               {SFX.Ecto.Types.USPhoneNumberType, :string},
               {SFX.Ecto.Types.JsonLogicType, :json},
               {:__ecto_virtual_field__, :__EXCLUDE__},
               {:__ecto_join_table__, :__EXCLUDE__}
             ]
    end

    test "returns the correct mapping for :ecto_to_typescript" do
      assert Types.permuted_conversion_mappings().ecto_to_typescript == [
               {:binary, "string"},
               {:string, "string"},
               {:boolean, "boolean"},
               {:float, "number"},
               {:integer, "Int"},
               {:decimal, "Decimal"},
               {:time, "TimeStr"},
               {:time_usec, "TimeStr"},
               {:date, "DateStr"},
               {:naive_datetime, "DateTimeStr"},
               {:naive_datetime_usec, "DateTimeStr"},
               {:utc_datetime, "DateTimeStr"},
               {:utc_datetime_usec, "DateTimeStr"},
               {:map, "Object"},
               {:id, "ID"},
               {:binary_id, "UUID4"},
               {Ecto.UUID, "UUID4"},
               {:inet, "IPv4"},
               {EctoFields.URL, "UrlStr"},
               {EctoNetwork.INET, "IPv4"},
               {Postgrex.INET, "IPv4"},
               {SFX.Ecto.Types.DriversLicenseNumberType, "string"},
               {SFX.Ecto.Types.EmailType, "string"},
               {SFX.Ecto.Types.FederalTaxIdType, "string"},
               {SFX.Ecto.Types.ImageBase64Type, "string"},
               {SFX.Ecto.Types.SSNType, "string"},
               {SFX.Ecto.Types.USPhoneNumberType, "string"},
               {SFX.Ecto.Types.JsonLogicType, "JsonLogicObject"},
               {:__ecto_virtual_field__, "any"},
               {:__ecto_join_table__, "Object"}
             ]
    end

    test "returns the correct mapping for :ecto_to_typespec" do
      assert Types.permuted_conversion_mappings().ecto_to_typespec == [
               {:binary, "String.t()"},
               {:string, "String.t()"},
               {:boolean, "boolean()"},
               {:float, "float()"},
               {:integer, "integer()"},
               {:decimal, "Decimal.t()"},
               {:time, "Time.t()"},
               {:time_usec, "Time.t()"},
               {:date, "Date.t()"},
               {:naive_datetime, "NaiveDateTime.t()"},
               {:naive_datetime_usec, "NaiveDateTime.t()"},
               {:utc_datetime, "DateTime.t()"},
               {:utc_datetime_usec, "DateTime.t()"},
               {:map, "map()"},
               {:id, "SFX.foreign_key()"},
               {:binary_id, "Ecto.UUID.t()"},
               {Ecto.UUID, "Ecto.UUID.t()"},
               {:inet, "Postgrex.INET()"},
               {EctoFields.URL, "String.t()"},
               {EctoNetwork.INET, "Postgrex.INET()"},
               {Postgrex.INET, "Postgrex.INET()"},
               {
                 SFX.Ecto.Types.DriversLicenseNumberType,
                 "String.t()"
               },
               {SFX.Ecto.Types.EmailType, "String.t()"},
               {SFX.Ecto.Types.FederalTaxIdType, "String.t()"},
               {SFX.Ecto.Types.ImageBase64Type, "String.t()"},
               {SFX.Ecto.Types.SSNType, "String.t()"},
               {SFX.Ecto.Types.USPhoneNumberType, "String.t()"},
               {
                 SFX.Ecto.Types.JsonLogicType,
                 "SFX.Ecto.Types.JsonLogicType.t()"
               },
               {:__ecto_virtual_field__, "virtual :: any()"},
               {:__ecto_join_table__, "join_table :: struct()"}
             ]
    end

    test "returns the correct mapping for :typescript_to_absinthe" do
      assert Types.permuted_conversion_mappings().typescript_to_absinthe == [
               {"string", :string},
               {"string", :string},
               {"boolean", :boolean},
               {"number", :float},
               {"Int", :integer},
               {"Decimal", :decimal},
               {"TimeStr", :time},
               {"TimeStr", :time},
               {"DateStr", :date},
               {"DateTimeStr", :naive_datetime},
               {"DateTimeStr", :naive_datetime},
               {"DateTimeStr", :datetime},
               {"DateTimeStr", :datetime},
               {"Object", :json},
               {"ID", :id},
               {"UUID4", :uuid4},
               {"UUID4", :uuid4},
               {"IPv4", :inet},
               {"UrlStr", :string},
               {"IPv4", :inet},
               {"IPv4", :inet},
               {"string", :string},
               {"string", :string},
               {"string", :string},
               {"string", :string},
               {"string", :string},
               {"string", :string},
               {"JsonLogicObject", :json},
               {"any", :__EXCLUDE__},
               {"Object", :__EXCLUDE__}
             ]
    end

    test "returns the correct mapping for :typescript_to_ecto" do
      assert Types.permuted_conversion_mappings().typescript_to_ecto == [
               {"string", :binary},
               {"string", :string},
               {"boolean", :boolean},
               {"number", :float},
               {"Int", :integer},
               {"Decimal", :decimal},
               {"TimeStr", :time},
               {"TimeStr", :time_usec},
               {"DateStr", :date},
               {"DateTimeStr", :naive_datetime},
               {"DateTimeStr", :naive_datetime_usec},
               {"DateTimeStr", :utc_datetime},
               {"DateTimeStr", :utc_datetime_usec},
               {"Object", :map},
               {"ID", :id},
               {"UUID4", :binary_id},
               {"UUID4", Ecto.UUID},
               {"IPv4", :inet},
               {"UrlStr", EctoFields.URL},
               {"IPv4", EctoNetwork.INET},
               {"IPv4", Postgrex.INET},
               {"string", SFX.Ecto.Types.DriversLicenseNumberType},
               {"string", SFX.Ecto.Types.EmailType},
               {"string", SFX.Ecto.Types.FederalTaxIdType},
               {"string", SFX.Ecto.Types.ImageBase64Type},
               {"string", SFX.Ecto.Types.SSNType},
               {"string", SFX.Ecto.Types.USPhoneNumberType},
               {"JsonLogicObject", SFX.Ecto.Types.JsonLogicType},
               {"any", :__ecto_virtual_field__},
               {"Object", :__ecto_join_table__}
             ]
    end

    test "returns the correct mapping for :typescript_to_typespec" do
      assert Types.permuted_conversion_mappings().typescript_to_typespec == [
               {"string", "String.t()"},
               {"string", "String.t()"},
               {"boolean", "boolean()"},
               {"number", "float()"},
               {"Int", "integer()"},
               {"Decimal", "Decimal.t()"},
               {"TimeStr", "Time.t()"},
               {"TimeStr", "Time.t()"},
               {"DateStr", "Date.t()"},
               {"DateTimeStr", "NaiveDateTime.t()"},
               {"DateTimeStr", "NaiveDateTime.t()"},
               {"DateTimeStr", "DateTime.t()"},
               {"DateTimeStr", "DateTime.t()"},
               {"Object", "map()"},
               {"ID", "SFX.foreign_key()"},
               {"UUID4", "Ecto.UUID.t()"},
               {"UUID4", "Ecto.UUID.t()"},
               {"IPv4", "Postgrex.INET()"},
               {"UrlStr", "String.t()"},
               {"IPv4", "Postgrex.INET()"},
               {"IPv4", "Postgrex.INET()"},
               {"string", "String.t()"},
               {"string", "String.t()"},
               {"string", "String.t()"},
               {"string", "String.t()"},
               {"string", "String.t()"},
               {"string", "String.t()"},
               {"JsonLogicObject", "SFX.Ecto.Types.JsonLogicType.t()"},
               {"any", "virtual :: any()"},
               {"Object", "join_table :: struct()"}
             ]
    end

    test "returns the correct mapping for :typespec_to_absinthe" do
      assert Types.permuted_conversion_mappings().typespec_to_absinthe == [
               {"String.t()", :string},
               {"String.t()", :string},
               {"boolean()", :boolean},
               {"float()", :float},
               {"integer()", :integer},
               {"Decimal.t()", :decimal},
               {"Time.t()", :time},
               {"Time.t()", :time},
               {"Date.t()", :date},
               {"NaiveDateTime.t()", :naive_datetime},
               {"NaiveDateTime.t()", :naive_datetime},
               {"DateTime.t()", :datetime},
               {"DateTime.t()", :datetime},
               {"map()", :json},
               {"SFX.foreign_key()", :id},
               {"Ecto.UUID.t()", :uuid4},
               {"Ecto.UUID.t()", :uuid4},
               {"Postgrex.INET()", :inet},
               {"String.t()", :string},
               {"Postgrex.INET()", :inet},
               {"Postgrex.INET()", :inet},
               {"String.t()", :string},
               {"String.t()", :string},
               {"String.t()", :string},
               {"String.t()", :string},
               {"String.t()", :string},
               {"String.t()", :string},
               {"SFX.Ecto.Types.JsonLogicType.t()", :json},
               {"virtual :: any()", :__EXCLUDE__},
               {"join_table :: struct()", :__EXCLUDE__}
             ]
    end

    test "returns the correct mapping for :typespec_to_ecto" do
      assert Types.permuted_conversion_mappings().typespec_to_ecto == [
               {"String.t()", :binary},
               {"String.t()", :string},
               {"boolean()", :boolean},
               {"float()", :float},
               {"integer()", :integer},
               {"Decimal.t()", :decimal},
               {"Time.t()", :time},
               {"Time.t()", :time_usec},
               {"Date.t()", :date},
               {"NaiveDateTime.t()", :naive_datetime},
               {"NaiveDateTime.t()", :naive_datetime_usec},
               {"DateTime.t()", :utc_datetime},
               {"DateTime.t()", :utc_datetime_usec},
               {"map()", :map},
               {"SFX.foreign_key()", :id},
               {"Ecto.UUID.t()", :binary_id},
               {"Ecto.UUID.t()", Ecto.UUID},
               {"Postgrex.INET()", :inet},
               {"String.t()", EctoFields.URL},
               {"Postgrex.INET()", EctoNetwork.INET},
               {"Postgrex.INET()", Postgrex.INET},
               {
                 "String.t()",
                 SFX.Ecto.Types.DriversLicenseNumberType
               },
               {"String.t()", SFX.Ecto.Types.EmailType},
               {"String.t()", SFX.Ecto.Types.FederalTaxIdType},
               {"String.t()", SFX.Ecto.Types.ImageBase64Type},
               {"String.t()", SFX.Ecto.Types.SSNType},
               {"String.t()", SFX.Ecto.Types.USPhoneNumberType},
               {
                 "SFX.Ecto.Types.JsonLogicType.t()",
                 SFX.Ecto.Types.JsonLogicType
               },
               {"virtual :: any()", :__ecto_virtual_field__},
               {"join_table :: struct()", :__ecto_join_table__}
             ]
    end

    test "returns the correct mapping for :typespec_to_typescript" do
      assert Types.permuted_conversion_mappings().typespec_to_typescript == [
               {"String.t()", "string"},
               {"String.t()", "string"},
               {"boolean()", "boolean"},
               {"float()", "number"},
               {"integer()", "Int"},
               {"Decimal.t()", "Decimal"},
               {"Time.t()", "TimeStr"},
               {"Time.t()", "TimeStr"},
               {"Date.t()", "DateStr"},
               {"NaiveDateTime.t()", "DateTimeStr"},
               {"NaiveDateTime.t()", "DateTimeStr"},
               {"DateTime.t()", "DateTimeStr"},
               {"DateTime.t()", "DateTimeStr"},
               {"map()", "Object"},
               {"SFX.foreign_key()", "ID"},
               {"Ecto.UUID.t()", "UUID4"},
               {"Ecto.UUID.t()", "UUID4"},
               {"Postgrex.INET()", "IPv4"},
               {"String.t()", "UrlStr"},
               {"Postgrex.INET()", "IPv4"},
               {"Postgrex.INET()", "IPv4"},
               {"String.t()", "string"},
               {"String.t()", "string"},
               {"String.t()", "string"},
               {"String.t()", "string"},
               {"String.t()", "string"},
               {"String.t()", "string"},
               {
                 "SFX.Ecto.Types.JsonLogicType.t()",
                 "JsonLogicObject"
               },
               {"virtual :: any()", "any"},
               {"join_table :: struct()", "Object"}
             ]
    end

    test "returns the correct mappings" do
      assert Types.permuted_conversion_mappings() == %{
               absinthe_to_ecto: [
                 string: :binary,
                 string: :string,
                 boolean: :boolean,
                 float: :float,
                 integer: :integer,
                 decimal: :decimal,
                 time: :time,
                 time: :time_usec,
                 date: :date,
                 naive_datetime: :naive_datetime,
                 naive_datetime: :naive_datetime_usec,
                 datetime: :utc_datetime,
                 datetime: :utc_datetime_usec,
                 json: :map,
                 id: :id,
                 uuid4: :binary_id,
                 uuid4: Ecto.UUID,
                 inet: :inet,
                 string: EctoFields.URL,
                 inet: EctoNetwork.INET,
                 inet: Postgrex.INET,
                 string: SFX.Ecto.Types.DriversLicenseNumberType,
                 string: SFX.Ecto.Types.EmailType,
                 string: SFX.Ecto.Types.FederalTaxIdType,
                 string: SFX.Ecto.Types.ImageBase64Type,
                 string: SFX.Ecto.Types.SSNType,
                 string: SFX.Ecto.Types.USPhoneNumberType,
                 json: SFX.Ecto.Types.JsonLogicType,
                 __EXCLUDE__: :__ecto_virtual_field__,
                 __EXCLUDE__: :__ecto_join_table__
               ],
               absinthe_to_typescript: [
                 string: "string",
                 string: "string",
                 boolean: "boolean",
                 float: "number",
                 integer: "Int",
                 decimal: "Decimal",
                 time: "TimeStr",
                 time: "TimeStr",
                 date: "DateStr",
                 naive_datetime: "DateTimeStr",
                 naive_datetime: "DateTimeStr",
                 datetime: "DateTimeStr",
                 datetime: "DateTimeStr",
                 json: "Object",
                 id: "ID",
                 uuid4: "UUID4",
                 uuid4: "UUID4",
                 inet: "IPv4",
                 string: "UrlStr",
                 inet: "IPv4",
                 inet: "IPv4",
                 string: "string",
                 string: "string",
                 string: "string",
                 string: "string",
                 string: "string",
                 string: "string",
                 json: "JsonLogicObject",
                 __EXCLUDE__: "any",
                 __EXCLUDE__: "Object"
               ],
               absinthe_to_typespec: [
                 string: "String.t()",
                 string: "String.t()",
                 boolean: "boolean()",
                 float: "float()",
                 integer: "integer()",
                 decimal: "Decimal.t()",
                 time: "Time.t()",
                 time: "Time.t()",
                 date: "Date.t()",
                 naive_datetime: "NaiveDateTime.t()",
                 naive_datetime: "NaiveDateTime.t()",
                 datetime: "DateTime.t()",
                 datetime: "DateTime.t()",
                 json: "map()",
                 id: "SFX.foreign_key()",
                 uuid4: "Ecto.UUID.t()",
                 uuid4: "Ecto.UUID.t()",
                 inet: "Postgrex.INET()",
                 string: "String.t()",
                 inet: "Postgrex.INET()",
                 inet: "Postgrex.INET()",
                 string: "String.t()",
                 string: "String.t()",
                 string: "String.t()",
                 string: "String.t()",
                 string: "String.t()",
                 string: "String.t()",
                 json: "SFX.Ecto.Types.JsonLogicType.t()",
                 __EXCLUDE__: "virtual :: any()",
                 __EXCLUDE__: "join_table :: struct()"
               ],
               ecto_to_absinthe: [
                 {:binary, :string},
                 {:string, :string},
                 {:boolean, :boolean},
                 {:float, :float},
                 {:integer, :integer},
                 {:decimal, :decimal},
                 {:time, :time},
                 {:time_usec, :time},
                 {:date, :date},
                 {:naive_datetime, :naive_datetime},
                 {:naive_datetime_usec, :naive_datetime},
                 {:utc_datetime, :datetime},
                 {:utc_datetime_usec, :datetime},
                 {:map, :json},
                 {:id, :id},
                 {:binary_id, :uuid4},
                 {Ecto.UUID, :uuid4},
                 {:inet, :inet},
                 {EctoFields.URL, :string},
                 {EctoNetwork.INET, :inet},
                 {Postgrex.INET, :inet},
                 {SFX.Ecto.Types.DriversLicenseNumberType, :string},
                 {SFX.Ecto.Types.EmailType, :string},
                 {SFX.Ecto.Types.FederalTaxIdType, :string},
                 {SFX.Ecto.Types.ImageBase64Type, :string},
                 {SFX.Ecto.Types.SSNType, :string},
                 {SFX.Ecto.Types.USPhoneNumberType, :string},
                 {SFX.Ecto.Types.JsonLogicType, :json},
                 {:__ecto_virtual_field__, :__EXCLUDE__},
                 {:__ecto_join_table__, :__EXCLUDE__}
               ],
               ecto_to_typescript: [
                 {:binary, "string"},
                 {:string, "string"},
                 {:boolean, "boolean"},
                 {:float, "number"},
                 {:integer, "Int"},
                 {:decimal, "Decimal"},
                 {:time, "TimeStr"},
                 {:time_usec, "TimeStr"},
                 {:date, "DateStr"},
                 {:naive_datetime, "DateTimeStr"},
                 {:naive_datetime_usec, "DateTimeStr"},
                 {:utc_datetime, "DateTimeStr"},
                 {:utc_datetime_usec, "DateTimeStr"},
                 {:map, "Object"},
                 {:id, "ID"},
                 {:binary_id, "UUID4"},
                 {Ecto.UUID, "UUID4"},
                 {:inet, "IPv4"},
                 {EctoFields.URL, "UrlStr"},
                 {EctoNetwork.INET, "IPv4"},
                 {Postgrex.INET, "IPv4"},
                 {SFX.Ecto.Types.DriversLicenseNumberType, "string"},
                 {SFX.Ecto.Types.EmailType, "string"},
                 {SFX.Ecto.Types.FederalTaxIdType, "string"},
                 {SFX.Ecto.Types.ImageBase64Type, "string"},
                 {SFX.Ecto.Types.SSNType, "string"},
                 {SFX.Ecto.Types.USPhoneNumberType, "string"},
                 {SFX.Ecto.Types.JsonLogicType, "JsonLogicObject"},
                 {:__ecto_virtual_field__, "any"},
                 {:__ecto_join_table__, "Object"}
               ],
               ecto_to_typespec: [
                 {:binary, "String.t()"},
                 {:string, "String.t()"},
                 {:boolean, "boolean()"},
                 {:float, "float()"},
                 {:integer, "integer()"},
                 {:decimal, "Decimal.t()"},
                 {:time, "Time.t()"},
                 {:time_usec, "Time.t()"},
                 {:date, "Date.t()"},
                 {:naive_datetime, "NaiveDateTime.t()"},
                 {:naive_datetime_usec, "NaiveDateTime.t()"},
                 {:utc_datetime, "DateTime.t()"},
                 {:utc_datetime_usec, "DateTime.t()"},
                 {:map, "map()"},
                 {:id, "SFX.foreign_key()"},
                 {:binary_id, "Ecto.UUID.t()"},
                 {Ecto.UUID, "Ecto.UUID.t()"},
                 {:inet, "Postgrex.INET()"},
                 {EctoFields.URL, "String.t()"},
                 {EctoNetwork.INET, "Postgrex.INET()"},
                 {Postgrex.INET, "Postgrex.INET()"},
                 {SFX.Ecto.Types.DriversLicenseNumberType, "String.t()"},
                 {SFX.Ecto.Types.EmailType, "String.t()"},
                 {SFX.Ecto.Types.FederalTaxIdType, "String.t()"},
                 {SFX.Ecto.Types.ImageBase64Type, "String.t()"},
                 {SFX.Ecto.Types.SSNType, "String.t()"},
                 {SFX.Ecto.Types.USPhoneNumberType, "String.t()"},
                 {SFX.Ecto.Types.JsonLogicType, "SFX.Ecto.Types.JsonLogicType.t()"},
                 {:__ecto_virtual_field__, "virtual :: any()"},
                 {:__ecto_join_table__, "join_table :: struct()"}
               ],
               typescript_to_absinthe: [
                 {"string", :string},
                 {"string", :string},
                 {"boolean", :boolean},
                 {"number", :float},
                 {"Int", :integer},
                 {"Decimal", :decimal},
                 {"TimeStr", :time},
                 {"TimeStr", :time},
                 {"DateStr", :date},
                 {"DateTimeStr", :naive_datetime},
                 {"DateTimeStr", :naive_datetime},
                 {"DateTimeStr", :datetime},
                 {"DateTimeStr", :datetime},
                 {"Object", :json},
                 {"ID", :id},
                 {"UUID4", :uuid4},
                 {"UUID4", :uuid4},
                 {"IPv4", :inet},
                 {"UrlStr", :string},
                 {"IPv4", :inet},
                 {"IPv4", :inet},
                 {"string", :string},
                 {"string", :string},
                 {"string", :string},
                 {"string", :string},
                 {"string", :string},
                 {"string", :string},
                 {"JsonLogicObject", :json},
                 {"any", :__EXCLUDE__},
                 {"Object", :__EXCLUDE__}
               ],
               typescript_to_ecto: [
                 {"string", :binary},
                 {"string", :string},
                 {"boolean", :boolean},
                 {"number", :float},
                 {"Int", :integer},
                 {"Decimal", :decimal},
                 {"TimeStr", :time},
                 {"TimeStr", :time_usec},
                 {"DateStr", :date},
                 {"DateTimeStr", :naive_datetime},
                 {"DateTimeStr", :naive_datetime_usec},
                 {"DateTimeStr", :utc_datetime},
                 {"DateTimeStr", :utc_datetime_usec},
                 {"Object", :map},
                 {"ID", :id},
                 {"UUID4", :binary_id},
                 {"UUID4", Ecto.UUID},
                 {"IPv4", :inet},
                 {"UrlStr", EctoFields.URL},
                 {"IPv4", EctoNetwork.INET},
                 {"IPv4", Postgrex.INET},
                 {"string", SFX.Ecto.Types.DriversLicenseNumberType},
                 {"string", SFX.Ecto.Types.EmailType},
                 {"string", SFX.Ecto.Types.FederalTaxIdType},
                 {"string", SFX.Ecto.Types.ImageBase64Type},
                 {"string", SFX.Ecto.Types.SSNType},
                 {"string", SFX.Ecto.Types.USPhoneNumberType},
                 {"JsonLogicObject", SFX.Ecto.Types.JsonLogicType},
                 {"any", :__ecto_virtual_field__},
                 {"Object", :__ecto_join_table__}
               ],
               typescript_to_typespec: [
                 {"string", "String.t()"},
                 {"string", "String.t()"},
                 {"boolean", "boolean()"},
                 {"number", "float()"},
                 {"Int", "integer()"},
                 {"Decimal", "Decimal.t()"},
                 {"TimeStr", "Time.t()"},
                 {"TimeStr", "Time.t()"},
                 {"DateStr", "Date.t()"},
                 {"DateTimeStr", "NaiveDateTime.t()"},
                 {"DateTimeStr", "NaiveDateTime.t()"},
                 {"DateTimeStr", "DateTime.t()"},
                 {"DateTimeStr", "DateTime.t()"},
                 {"Object", "map()"},
                 {"ID", "SFX.foreign_key()"},
                 {"UUID4", "Ecto.UUID.t()"},
                 {"UUID4", "Ecto.UUID.t()"},
                 {"IPv4", "Postgrex.INET()"},
                 {"UrlStr", "String.t()"},
                 {"IPv4", "Postgrex.INET()"},
                 {"IPv4", "Postgrex.INET()"},
                 {"string", "String.t()"},
                 {"string", "String.t()"},
                 {"string", "String.t()"},
                 {"string", "String.t()"},
                 {"string", "String.t()"},
                 {"string", "String.t()"},
                 {"JsonLogicObject", "SFX.Ecto.Types.JsonLogicType.t()"},
                 {"any", "virtual :: any()"},
                 {"Object", "join_table :: struct()"}
               ],
               typespec_to_absinthe: [
                 {"String.t()", :string},
                 {"String.t()", :string},
                 {"boolean()", :boolean},
                 {"float()", :float},
                 {"integer()", :integer},
                 {"Decimal.t()", :decimal},
                 {"Time.t()", :time},
                 {"Time.t()", :time},
                 {"Date.t()", :date},
                 {"NaiveDateTime.t()", :naive_datetime},
                 {"NaiveDateTime.t()", :naive_datetime},
                 {"DateTime.t()", :datetime},
                 {"DateTime.t()", :datetime},
                 {"map()", :json},
                 {"SFX.foreign_key()", :id},
                 {"Ecto.UUID.t()", :uuid4},
                 {"Ecto.UUID.t()", :uuid4},
                 {"Postgrex.INET()", :inet},
                 {"String.t()", :string},
                 {"Postgrex.INET()", :inet},
                 {"Postgrex.INET()", :inet},
                 {"String.t()", :string},
                 {"String.t()", :string},
                 {"String.t()", :string},
                 {"String.t()", :string},
                 {"String.t()", :string},
                 {"String.t()", :string},
                 {"SFX.Ecto.Types.JsonLogicType.t()", :json},
                 {"virtual :: any()", :__EXCLUDE__},
                 {"join_table :: struct()", :__EXCLUDE__}
               ],
               typespec_to_ecto: [
                 {"String.t()", :binary},
                 {"String.t()", :string},
                 {"boolean()", :boolean},
                 {"float()", :float},
                 {"integer()", :integer},
                 {"Decimal.t()", :decimal},
                 {"Time.t()", :time},
                 {"Time.t()", :time_usec},
                 {"Date.t()", :date},
                 {"NaiveDateTime.t()", :naive_datetime},
                 {"NaiveDateTime.t()", :naive_datetime_usec},
                 {"DateTime.t()", :utc_datetime},
                 {"DateTime.t()", :utc_datetime_usec},
                 {"map()", :map},
                 {"SFX.foreign_key()", :id},
                 {"Ecto.UUID.t()", :binary_id},
                 {"Ecto.UUID.t()", Ecto.UUID},
                 {"Postgrex.INET()", :inet},
                 {"String.t()", EctoFields.URL},
                 {"Postgrex.INET()", EctoNetwork.INET},
                 {"Postgrex.INET()", Postgrex.INET},
                 {"String.t()", SFX.Ecto.Types.DriversLicenseNumberType},
                 {"String.t()", SFX.Ecto.Types.EmailType},
                 {"String.t()", SFX.Ecto.Types.FederalTaxIdType},
                 {"String.t()", SFX.Ecto.Types.ImageBase64Type},
                 {"String.t()", SFX.Ecto.Types.SSNType},
                 {"String.t()", SFX.Ecto.Types.USPhoneNumberType},
                 {"SFX.Ecto.Types.JsonLogicType.t()", SFX.Ecto.Types.JsonLogicType},
                 {"virtual :: any()", :__ecto_virtual_field__},
                 {"join_table :: struct()", :__ecto_join_table__}
               ],
               typespec_to_typescript: [
                 {"String.t()", "string"},
                 {"String.t()", "string"},
                 {"boolean()", "boolean"},
                 {"float()", "number"},
                 {"integer()", "Int"},
                 {"Decimal.t()", "Decimal"},
                 {"Time.t()", "TimeStr"},
                 {"Time.t()", "TimeStr"},
                 {"Date.t()", "DateStr"},
                 {"NaiveDateTime.t()", "DateTimeStr"},
                 {"NaiveDateTime.t()", "DateTimeStr"},
                 {"DateTime.t()", "DateTimeStr"},
                 {"DateTime.t()", "DateTimeStr"},
                 {"map()", "Object"},
                 {"SFX.foreign_key()", "ID"},
                 {"Ecto.UUID.t()", "UUID4"},
                 {"Ecto.UUID.t()", "UUID4"},
                 {"Postgrex.INET()", "IPv4"},
                 {"String.t()", "UrlStr"},
                 {"Postgrex.INET()", "IPv4"},
                 {"Postgrex.INET()", "IPv4"},
                 {"String.t()", "string"},
                 {"String.t()", "string"},
                 {"String.t()", "string"},
                 {"String.t()", "string"},
                 {"String.t()", "string"},
                 {"String.t()", "string"},
                 {"SFX.Ecto.Types.JsonLogicType.t()", "JsonLogicObject"},
                 {"virtual :: any()", "any"},
                 {"join_table :: struct()", "Object"}
               ]
             }
    end

    @tag :cli_not_implemented
    test "returns the correct mapping for :absinthe_to_cli" do
      assert Types.permuted_conversion_mappings().absinthe_to_cli == []
    end

    @tag :cli_not_implemented
    test "returns the correct mapping for :cli_to_absinthe" do
      assert Types.permuted_conversion_mappings().cli_to_absinthe == []
    end

    @tag :cli_not_implemented
    test "returns the correct mapping for :cli_to_ecto" do
      assert Types.permuted_conversion_mappings().cli_to_ecto == []
    end

    @tag :cli_not_implemented
    test "returns the correct mapping for :cli_to_typescript" do
      assert Types.permuted_conversion_mappings().cli_to_typescript == []
    end

    @tag :cli_not_implemented
    test "returns the correct mapping for :cli_to_typespec" do
      assert Types.permuted_conversion_mappings().cli_to_typespec == []
    end

    @tag :cli_not_implemented
    test "returns the correct mapping for :ecto_to_cli" do
      assert Types.permuted_conversion_mappings().ecto_to_cli == []
    end

    @tag :cli_not_implemented
    test "returns the correct mapping for :typescript_to_cli" do
      assert Types.permuted_conversion_mappings().typescript_to_cli == []
    end

    @tag :cli_not_implemented
    test "returns the correct mapping for :typespec_to_cli" do
      assert Types.permuted_conversion_mappings().typespec_to_cli == []
    end
  end
end
